{"version":3,"sources":["components/Card/CharacterCard.js","components/Container/index.js","components/Row/index.js","components/Column/index.js","components/Header/index.js","App.js","index.js"],"names":["CharacterCard","props","className","onClick","src","image","alt","Container","children","Row","Column","column","Header","nav","row","id","refreshPage","score","App","state","characters","clickedCharacters","shuffleCards","handleClick","bind","character","this","checkWinLose","cardArray","i","length","j","Math","floor","random","currentCharacters","newCharacters","shuffle","setState","console","log","isAlreadyClicked","find","storedId","lose","incrementScore","win","concat","push","reset","window","location","reload","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"49CAciBA,MAXjB,SAAuBC,GACrB,OACI,yBAAKC,UAAU,OAAOC,QAASF,EAAME,SAE7B,yBAAKC,IAAKH,EAAMI,MAAMH,UAAU,eAAeI,IAAI,UCIlDC,MATf,SAAmBN,GACf,OAEI,yBAAKC,UAAU,aACVD,EAAMO,WCIJC,MARf,SAAaR,GACT,OACI,yBAAKC,UAAU,OACVD,EAAMO,WCKJE,MARd,SAAiBT,GACd,OACI,yBAAKC,UAAWD,EAAMU,QACrBV,EAAMO,W,aCgBAI,MAjBf,SAAgBX,GACZ,OACI,yBAAKC,UAAWD,EAAMY,KAClB,yBAAKX,UAAU,aACX,yBAAKA,UAAWD,EAAMa,KAClB,yBAAKZ,UAAWD,EAAMU,OAAQI,GAAG,cAAa,wBAAIZ,QAASF,EAAMe,aAAnB,IAAiC,sDAAjC,MAE9C,yBAAKd,UAAWD,EAAMU,OAAQI,GAAG,cAAa,wDAE9C,yBAAKA,GAAG,cAAa,sCAAYd,EAAMgB,MAAlB,uBC4G1BC,G,wDA9Gb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,aACAH,MAAO,EACPI,kBAAmB,IAErB,EAAKC,eACL,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,wDAWPC,GACVC,KAAKC,aAAaF,K,8BAIZG,GACN,IAAK,IAAIC,EAAID,EAAUE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADG,EAEd,CAACD,EAAUG,GAAIH,EAAUC,IAAvDD,EAAUC,GAFkC,KAE9BD,EAAUG,GAFoB,KAI/C,OAAOH,I,qCAIP,IAAMO,EAAoBT,KAAKP,MAAMC,WAC/BgB,EAAgBV,KAAKW,QAAQF,GACnCT,KAAKY,SAAS,CAAElB,WAAYgB,M,uCAI5BV,KAAKY,SAAS,CAAErB,MAAOS,KAAKP,MAAMF,MAAQ,IAC1CsB,QAAQC,IAAI,qB,mCAGDf,GAAY,IACfV,EAAOU,EAAPV,GACF0B,EAAmBf,KAAKP,MAAME,kBAAkBqB,MAAK,SAAAC,GAGzD,OAFAJ,QAAQC,IAAI,WAAYG,GACxBJ,QAAQC,IAAI,OAAQzB,GACb4B,IAAa5B,KAKtB,GADAwB,QAAQC,IAAI,qBAAsBC,GAC9BA,EACFf,KAAKkB,YAEF,GAAyB,KAArBlB,KAAKP,MAAMF,MAClBS,KAAKmB,iBACLnB,KAAKoB,UAEF,CAAC,IACEzB,EAAsBK,KAAKP,MAA3BE,mBACNA,EAAoB,GAAG0B,OAAO1B,IACZ2B,KAAKjC,GACvBW,KAAKY,SAAS,CAAEjB,sBAChBK,KAAKmB,iBACLnB,KAAKJ,eAGPiB,QAAQC,IAAI,iCAAkCd,KAAKP,MAAME,qB,8BAIzDK,KAAKY,SAAS,CACZrB,MAAO,EACPI,kBAAmB,O,4BAMrBK,KAAKuB,U,6BAILvB,KAAKuB,U,oCAILC,OAAOC,SAASC,W,+BAGR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQnC,MAAOS,KAAKP,MAAMF,MAAON,OAAO,WAAWG,IAAI,MAAMD,IAAI,sDAAsDG,YAAaU,KAAKV,cACzI,kBAAC,EAAD,KACA,kBAAC,EAAD,KACGU,KAAKP,MAAMC,WAAWiC,KAAI,SAAA5B,GACzB,OACE,kBAAC,EAAD,CAAQ6B,IAAK7B,EAAUV,GAAIJ,OAAO,YAChC,kBAAC,EAAD,CACEN,MAAOoB,EAAUpB,MACjBF,QAAS,WACP,EAAKoB,YAAYE,iB,GAlGnB8B,cCLlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fb171cb8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n      <div className=\"card\" onClick={props.onClick}>\r\n          \r\n              <img src={props.image}className=\"card-img-top\" alt=\"...\" />\r\n         \r\n\r\n      </div>\r\n  )\r\n}\r\n  \r\n  export default CharacterCard;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\n function Column (props) {\r\n    return (\r\n        <div className={props.column}>\r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Column;","import React from \"react\";\r\nimport \"./index.css\"\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <nav className={props.nav}>\r\n            <div className=\"container\">\r\n                <div className={props.row}>\r\n                    <div className={props.column} id=\"navElement\"><h1 onClick={props.refreshPage}> <span>Princess Memory Game</span> </h1>\r\n                    </div>\r\n                    <div className={props.column} id=\"navElement\"><h3>Click an image to begin</h3>\r\n                    </div>\r\n                    <div id=\"navElement\"><h3>Score: {props.score} | Top Score: </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport CharacterCard from './components/Card/CharacterCard';\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row\";\nimport Column from \"./components/Column\";\nimport characters from \"./characters.json\";\nimport Header from \"./components/Header\";\nimport \"./index.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      characters,\n      score: 0,\n      clickedCharacters: []\n    }\n    this.shuffleCards();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(character) {\n    this.checkWinLose(character);\n\n  }\n\n  shuffle(cardArray) {\n    for (let i = cardArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cardArray[i], cardArray[j]] = [cardArray[j], cardArray[i]];\n    }\n    return cardArray;\n  }\n\n  shuffleCards() {\n    const currentCharacters = this.state.characters;\n    const newCharacters = this.shuffle(currentCharacters);\n    this.setState({ characters: newCharacters })\n  }\n\n  incrementScore() {\n    this.setState({ score: this.state.score + 1 });\n    console.log(\"increment score\")\n  }\n\n  checkWinLose(character) {\n    const { id } = character;\n    const isAlreadyClicked = this.state.clickedCharacters.find(storedId => {\n      console.log(\"stored: \", storedId);\n      console.log(\"id: \", id);\n      return storedId === id;\n\n\n    });\n    console.log(\"Already clicked?: \", isAlreadyClicked)\n    if (isAlreadyClicked) {\n      this.lose();\n    }\n    else if (this.state.score === 11) {\n      this.incrementScore();\n      this.win();\n    }\n    else {\n      let { clickedCharacters } = this.state;\n      clickedCharacters = [].concat(clickedCharacters);\n      clickedCharacters.push(id);\n      this.setState({ clickedCharacters });\n      this.incrementScore();\n      this.shuffleCards();\n\n    }\n    console.log(\"clicked characters check win: \", this.state.clickedCharacters)\n  }\n\n  reset() {\n    this.setState({\n      score: 0,\n      clickedCharacters: []\n    });\n\n  }\n\n  win() {\n    this.reset();\n  }\n\n  lose() {\n    this.reset();\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} column=\"col-md-6\" row=\"row\" nav=\"navbar navbar-dark bg-light bg-secondary sticky-top\" refreshPage={this.refreshPage}/>\n        <Container>\n        <Row>\n          {this.state.characters.map(character => {\n            return (\n              <Column key={character.id} column=\"col-sm-3\">\n                <CharacterCard\n                  image={character.image}\n                  onClick={() => {\n                    this.handleClick(character)\n                  }\n                  }\n                />\n              </Column>\n            )\n          })}\n        </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}